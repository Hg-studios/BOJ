#include <iostream>
#include <string>
#include <stack>
#include <algorithm>
using namespace std;

/* 문제에 있는 예시처럼 ()(((()())(())()))(()) 라고 한다면
* 우선, 가운데에 있는 큰 덩어리만 살펴보자. -> (((()())(())()))
* 그러면, 잘리는 총 막대 개수가 4개이다. 
* 그리고 레이저에 의해서 잘릴 때마다 그 때 존재하는 막대 개수만큼 막대가 늘어난다.
* 그래서 4 -> 7 -> 10 -> 13 -> 15 이런 식으로 증가하게 된다. 
* 그래서 맨 처음부터 막대의 개수를 모두 구하고 여기에서 레이저를 만나면 현재 
* 막대 개수를 더해주려고 하였는데 그럴 필요가 없었다.
* 우선, 잘릴 때 존재하는 막대 개수만큼 늘어나게 해주려면
* 레이저일 경우에 스택의 사이즈만큼 더해주면 된다.
* 그리고 막대의 개수는 닫는 괄호가 나올 때 +1 해주면 되는 것이다.
*/

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	
	//레이저의 개수와 막대의 개수를 잘 봐야함 
	string str; cin >> str;
	stack<char> s;
	int res = 0;

	for (int i = 0; i < str.size(); i++) {
		//여는 괄호는 push 해주면 됨
		if (str[i] == '(') s.push(str[i]);
		//닫는 괄호가 나온 경우
		else {
			if (str[i - 1] == '(') { //레이저인 경우
				s.pop(); //막대기인 줄 알고 넣은 레이저 꺼내기
				res += s.size(); //현재 스택에는 막대기만 있으므로 막대기 개수를 더해줌
			}
			else { //막대기인 경우 
				s.pop();
				res += 1;
			}
		}
	}
	cout << res;

	return 0;
}